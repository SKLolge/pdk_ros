// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_CameraImage.proto

#include "pdk_CameraImage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
namespace PDK {
constexpr CameraImage::CameraImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jpeg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , h264_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , width_(0u)
  , height_(0u)
  , bit_per_pixel_(0u)
  , jpeg_size_(0u)
  , sensor_id_(0u){}
struct CameraImageDefaultTypeInternal {
  constexpr CameraImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraImageDefaultTypeInternal() {}
  union {
    CameraImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraImageDefaultTypeInternal _CameraImage_default_instance_;
}  // namespace PDK
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pdk_5fCameraImage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pdk_5fCameraImage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pdk_5fCameraImage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pdk_5fCameraImage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, header_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, width_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, height_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, bit_per_pixel_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, raw_image_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, jpeg_data_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, jpeg_size_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, h264_image_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::CameraImage, sensor_id_),
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  2,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::pb::PDK::CameraImage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::PDK::_CameraImage_default_instance_),
};

const char descriptor_table_protodef_pdk_5fCameraImage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025pdk_CameraImage.proto\022\006pb.PDK\032\023pdk_Msg"
  "Header.proto\"\325\001\n\013CameraImage\022!\n\006header\030\001"
  " \001(\0132\021.pb.PDK.MsgHeader\022\020\n\005width\030\002 \001(\r:\001"
  "0\022\021\n\006height\030\003 \001(\r:\0010\022\030\n\rbit_per_pixel\030\004 "
  "\001(\r:\0010\022\021\n\traw_image\030\005 \001(\014\022\021\n\tjpeg_data\030\006"
  " \001(\014\022\024\n\tjpeg_size\030\007 \001(\r:\0010\022\022\n\nh264_image"
  "\030\010 \001(\014\022\024\n\tsensor_id\030\t \001(\r:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pdk_5fCameraImage_2eproto_deps[1] = {
  &::descriptor_table_pdk_5fMsgHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pdk_5fCameraImage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fCameraImage_2eproto = {
  false, false, 268, descriptor_table_protodef_pdk_5fCameraImage_2eproto, "pdk_CameraImage.proto", 
  &descriptor_table_pdk_5fCameraImage_2eproto_once, descriptor_table_pdk_5fCameraImage_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_pdk_5fCameraImage_2eproto::offsets,
  file_level_metadata_pdk_5fCameraImage_2eproto, file_level_enum_descriptors_pdk_5fCameraImage_2eproto, file_level_service_descriptors_pdk_5fCameraImage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pdk_5fCameraImage_2eproto_getter() {
  return &descriptor_table_pdk_5fCameraImage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pdk_5fCameraImage_2eproto(&descriptor_table_pdk_5fCameraImage_2eproto);
namespace pb {
namespace PDK {

// ===================================================================

class CameraImage::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraImage>()._has_bits_);
  static const ::pb::PDK::MsgHeader& header(const CameraImage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bit_per_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jpeg_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jpeg_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_h264_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::pb::PDK::MsgHeader&
CameraImage::_Internal::header(const CameraImage* msg) {
  return *msg->header_;
}
void CameraImage::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CameraImage::CameraImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.PDK.CameraImage)
}
CameraImage::CameraImage(const CameraImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_raw_image()) {
    raw_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_image(), 
      GetArenaForAllocation());
  }
  jpeg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_jpeg_data()) {
    jpeg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jpeg_data(), 
      GetArenaForAllocation());
  }
  h264_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_h264_image()) {
    h264_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_h264_image(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::pb::PDK::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sensor_id_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.CameraImage)
}

inline void CameraImage::SharedCtor() {
raw_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
jpeg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
h264_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(sensor_id_));
}

CameraImage::~CameraImage() {
  // @@protoc_insertion_point(destructor:pb.PDK.CameraImage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpeg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h264_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CameraImage::ArenaDtor(void* object) {
  CameraImage* _this = reinterpret_cast< CameraImage* >(object);
  (void)_this;
}
void CameraImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraImage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.CameraImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      raw_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      jpeg_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      h264_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jpeg_size_) -
        reinterpret_cast<char*>(&width_)) + sizeof(jpeg_size_));
  }
  sensor_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pb.PDK.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bit_per_pixel = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bit_per_pixel(&has_bits);
          bit_per_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes raw_image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_raw_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes jpeg_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_jpeg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 jpeg_size = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_jpeg_size(&has_bits);
          jpeg_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes h264_image = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_h264_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sensor_id = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_sensor_id(&has_bits);
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.CameraImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.MsgHeader header = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 width = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 bit_per_pixel = 4 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bit_per_pixel(), target);
  }

  // optional bytes raw_image = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_raw_image(), target);
  }

  // optional bytes jpeg_data = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_jpeg_data(), target);
  }

  // optional uint32 jpeg_size = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_jpeg_size(), target);
  }

  // optional bytes h264_image = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_h264_image(), target);
  }

  // optional uint32 sensor_id = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sensor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.CameraImage)
  return target;
}

size_t CameraImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.CameraImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes raw_image = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw_image());
    }

    // optional bytes jpeg_data = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpeg_data());
    }

    // optional bytes h264_image = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_h264_image());
    }

    // optional .pb.PDK.MsgHeader header = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 width = 2 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 bit_per_pixel = 4 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bit_per_pixel());
    }

    // optional uint32 jpeg_size = 7 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jpeg_size());
    }

  }
  // optional uint32 sensor_id = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraImage::GetClassData() const { return &_class_data_; }

void CameraImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CameraImage *>(to)->MergeFrom(
      static_cast<const CameraImage &>(from));
}


void CameraImage::MergeFrom(const CameraImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.CameraImage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_raw_image(from._internal_raw_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_jpeg_data(from._internal_jpeg_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_h264_image(from._internal_h264_image());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_header()->::pb::PDK::MsgHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      bit_per_pixel_ = from.bit_per_pixel_;
    }
    if (cached_has_bits & 0x00000080u) {
      jpeg_size_ = from.jpeg_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_sensor_id(from._internal_sensor_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraImage::CopyFrom(const CameraImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.CameraImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraImage::IsInitialized() const {
  return true;
}

void CameraImage::InternalSwap(CameraImage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_image_, GetArenaForAllocation(),
      &other->raw_image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &jpeg_data_, GetArenaForAllocation(),
      &other->jpeg_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &h264_image_, GetArenaForAllocation(),
      &other->h264_image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraImage, sensor_id_)
      + sizeof(CameraImage::sensor_id_)
      - PROTOBUF_FIELD_OFFSET(CameraImage, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pdk_5fCameraImage_2eproto_getter, &descriptor_table_pdk_5fCameraImage_2eproto_once,
      file_level_metadata_pdk_5fCameraImage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PDK::CameraImage* Arena::CreateMaybeMessage< ::pb::PDK::CameraImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::CameraImage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
