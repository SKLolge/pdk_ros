// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_VehicleDynamics.proto

#include "pdk_VehicleDynamics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
namespace PDK {
constexpr VehicleDynamics::VehicleDynamics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : t_header_(nullptr)
  , f_longvel_(0)
  , f_longaccel_(0)
  , f_yawrate_(0)
  , f_lataccel_(0){}
struct VehicleDynamicsDefaultTypeInternal {
  constexpr VehicleDynamicsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleDynamicsDefaultTypeInternal() {}
  union {
    VehicleDynamics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleDynamicsDefaultTypeInternal _VehicleDynamics_default_instance_;
}  // namespace PDK
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pdk_5fVehicleDynamics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pdk_5fVehicleDynamics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pdk_5fVehicleDynamics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pdk_5fVehicleDynamics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::PDK::VehicleDynamics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::VehicleDynamics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::VehicleDynamics, t_header_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::VehicleDynamics, f_longvel_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::VehicleDynamics, f_longaccel_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::VehicleDynamics, f_yawrate_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::VehicleDynamics, f_lataccel_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::pb::PDK::VehicleDynamics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::PDK::_VehicleDynamics_default_instance_),
};

const char descriptor_table_protodef_pdk_5fVehicleDynamics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031pdk_VehicleDynamics.proto\022\006pb.PDK\032\023pdk"
  "_MsgHeader.proto\"\205\001\n\017VehicleDynamics\022#\n\010"
  "t_Header\030\001 \001(\0132\021.pb.PDK.MsgHeader\022\021\n\tf_L"
  "ongVel\030\003 \001(\002\022\023\n\013f_LongAccel\030\004 \001(\002\022\021\n\tf_Y"
  "awRate\030\005 \001(\002\022\022\n\nf_LatAccel\030\006 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pdk_5fVehicleDynamics_2eproto_deps[1] = {
  &::descriptor_table_pdk_5fMsgHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pdk_5fVehicleDynamics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fVehicleDynamics_2eproto = {
  false, false, 192, descriptor_table_protodef_pdk_5fVehicleDynamics_2eproto, "pdk_VehicleDynamics.proto", 
  &descriptor_table_pdk_5fVehicleDynamics_2eproto_once, descriptor_table_pdk_5fVehicleDynamics_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_pdk_5fVehicleDynamics_2eproto::offsets,
  file_level_metadata_pdk_5fVehicleDynamics_2eproto, file_level_enum_descriptors_pdk_5fVehicleDynamics_2eproto, file_level_service_descriptors_pdk_5fVehicleDynamics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pdk_5fVehicleDynamics_2eproto_getter() {
  return &descriptor_table_pdk_5fVehicleDynamics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pdk_5fVehicleDynamics_2eproto(&descriptor_table_pdk_5fVehicleDynamics_2eproto);
namespace pb {
namespace PDK {

// ===================================================================

class VehicleDynamics::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleDynamics>()._has_bits_);
  static const ::pb::PDK::MsgHeader& t_header(const VehicleDynamics* msg);
  static void set_has_t_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_f_longvel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f_longaccel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f_yawrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f_lataccel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::pb::PDK::MsgHeader&
VehicleDynamics::_Internal::t_header(const VehicleDynamics* msg) {
  return *msg->t_header_;
}
void VehicleDynamics::clear_t_header() {
  if (t_header_ != nullptr) t_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VehicleDynamics::VehicleDynamics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.PDK.VehicleDynamics)
}
VehicleDynamics::VehicleDynamics(const VehicleDynamics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_t_header()) {
    t_header_ = new ::pb::PDK::MsgHeader(*from.t_header_);
  } else {
    t_header_ = nullptr;
  }
  ::memcpy(&f_longvel_, &from.f_longvel_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_lataccel_) -
    reinterpret_cast<char*>(&f_longvel_)) + sizeof(f_lataccel_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.VehicleDynamics)
}

inline void VehicleDynamics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f_lataccel_) -
    reinterpret_cast<char*>(&t_header_)) + sizeof(f_lataccel_));
}

VehicleDynamics::~VehicleDynamics() {
  // @@protoc_insertion_point(destructor:pb.PDK.VehicleDynamics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleDynamics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete t_header_;
}

void VehicleDynamics::ArenaDtor(void* object) {
  VehicleDynamics* _this = reinterpret_cast< VehicleDynamics* >(object);
  (void)_this;
}
void VehicleDynamics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleDynamics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleDynamics::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.VehicleDynamics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(t_header_ != nullptr);
    t_header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&f_longvel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f_lataccel_) -
        reinterpret_cast<char*>(&f_longvel_)) + sizeof(f_lataccel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleDynamics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pb.PDK.MsgHeader t_Header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f_LongVel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_f_longvel(&has_bits);
          f_longvel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_LongAccel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_f_longaccel(&has_bits);
          f_longaccel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_YawRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_f_yawrate(&has_bits);
          f_yawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_LatAccel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_f_lataccel(&has_bits);
          f_lataccel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleDynamics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.VehicleDynamics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.MsgHeader t_Header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::t_header(this), target, stream);
  }

  // optional float f_LongVel = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f_longvel(), target);
  }

  // optional float f_LongAccel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f_longaccel(), target);
  }

  // optional float f_YawRate = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f_yawrate(), target);
  }

  // optional float f_LatAccel = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f_lataccel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.VehicleDynamics)
  return target;
}

size_t VehicleDynamics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.VehicleDynamics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .pb.PDK.MsgHeader t_Header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_header_);
    }

    // optional float f_LongVel = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float f_LongAccel = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float f_YawRate = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float f_LatAccel = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleDynamics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleDynamics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleDynamics::GetClassData() const { return &_class_data_; }

void VehicleDynamics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VehicleDynamics *>(to)->MergeFrom(
      static_cast<const VehicleDynamics &>(from));
}


void VehicleDynamics::MergeFrom(const VehicleDynamics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.VehicleDynamics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_t_header()->::pb::PDK::MsgHeader::MergeFrom(from._internal_t_header());
    }
    if (cached_has_bits & 0x00000002u) {
      f_longvel_ = from.f_longvel_;
    }
    if (cached_has_bits & 0x00000004u) {
      f_longaccel_ = from.f_longaccel_;
    }
    if (cached_has_bits & 0x00000008u) {
      f_yawrate_ = from.f_yawrate_;
    }
    if (cached_has_bits & 0x00000010u) {
      f_lataccel_ = from.f_lataccel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleDynamics::CopyFrom(const VehicleDynamics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.VehicleDynamics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDynamics::IsInitialized() const {
  return true;
}

void VehicleDynamics::InternalSwap(VehicleDynamics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleDynamics, f_lataccel_)
      + sizeof(VehicleDynamics::f_lataccel_)
      - PROTOBUF_FIELD_OFFSET(VehicleDynamics, t_header_)>(
          reinterpret_cast<char*>(&t_header_),
          reinterpret_cast<char*>(&other->t_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleDynamics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pdk_5fVehicleDynamics_2eproto_getter, &descriptor_table_pdk_5fVehicleDynamics_2eproto_once,
      file_level_metadata_pdk_5fVehicleDynamics_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PDK::VehicleDynamics* Arena::CreateMaybeMessage< ::pb::PDK::VehicleDynamics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::VehicleDynamics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
