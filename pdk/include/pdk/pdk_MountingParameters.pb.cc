// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_MountingParameters.proto

#include "pdk_MountingParameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
namespace PDK {
constexpr MountingParameters::MountingParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : t_header_(nullptr)
  , t_currentorientation_(0)

  , f_currentlongpos_(0)
  , f_currentlatpos_(0)
  , f_currentvertpos_(0)
  , f_currentlongposcog_(0)
  , f_currentyawangle_(0)
  , f_currentdamping_(0){}
struct MountingParametersDefaultTypeInternal {
  constexpr MountingParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MountingParametersDefaultTypeInternal() {}
  union {
    MountingParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MountingParametersDefaultTypeInternal _MountingParameters_default_instance_;
}  // namespace PDK
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pdk_5fMountingParameters_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pdk_5fMountingParameters_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pdk_5fMountingParameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pdk_5fMountingParameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, t_header_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, f_currentlongpos_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, f_currentlatpos_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, f_currentvertpos_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, f_currentlongposcog_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, f_currentyawangle_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, f_currentdamping_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::MountingParameters, t_currentorientation_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::PDK::MountingParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::PDK::_MountingParameters_default_instance_),
};

const char descriptor_table_protodef_pdk_5fMountingParameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034pdk_MountingParameters.proto\022\006pb.PDK\032\031"
  "pdk_SensorMsgHeader.proto\"\200\003\n\022MountingPa"
  "rameters\022)\n\010t_Header\030\001 \001(\0132\027.pb.PDK.Sens"
  "orMsgHeader\022\030\n\020f_CurrentLongPos\030\023 \001(\002\022\027\n"
  "\017f_CurrentLatPos\030\024 \001(\002\022\030\n\020f_CurrentVertP"
  "os\030\025 \001(\002\022\033\n\023f_CurrentLongPosCoG\030\026 \001(\002\022\031\n"
  "\021f_CurrentYawAngle\030\027 \001(\002\022\030\n\020f_CurrentDam"
  "ping\030\032 \001(\002\022K\n\024t_CurrentOrientation\030\033 \001(\016"
  "2-.pb.PDK.MountingParameters.SensorOrien"
  "tationT\"S\n\022SensorOrientationT\022\035\n\031SENSOR_"
  "ORIENTATION_NORMAL\020\000\022\036\n\032SENSOR_ORIENTATI"
  "ON_ROTATED\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pdk_5fMountingParameters_2eproto_deps[1] = {
  &::descriptor_table_pdk_5fSensorMsgHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pdk_5fMountingParameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fMountingParameters_2eproto = {
  false, false, 452, descriptor_table_protodef_pdk_5fMountingParameters_2eproto, "pdk_MountingParameters.proto", 
  &descriptor_table_pdk_5fMountingParameters_2eproto_once, descriptor_table_pdk_5fMountingParameters_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_pdk_5fMountingParameters_2eproto::offsets,
  file_level_metadata_pdk_5fMountingParameters_2eproto, file_level_enum_descriptors_pdk_5fMountingParameters_2eproto, file_level_service_descriptors_pdk_5fMountingParameters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pdk_5fMountingParameters_2eproto_getter() {
  return &descriptor_table_pdk_5fMountingParameters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pdk_5fMountingParameters_2eproto(&descriptor_table_pdk_5fMountingParameters_2eproto);
namespace pb {
namespace PDK {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MountingParameters_SensorOrientationT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pdk_5fMountingParameters_2eproto);
  return file_level_enum_descriptors_pdk_5fMountingParameters_2eproto[0];
}
bool MountingParameters_SensorOrientationT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MountingParameters_SensorOrientationT MountingParameters::SENSOR_ORIENTATION_NORMAL;
constexpr MountingParameters_SensorOrientationT MountingParameters::SENSOR_ORIENTATION_ROTATED;
constexpr MountingParameters_SensorOrientationT MountingParameters::SensorOrientationT_MIN;
constexpr MountingParameters_SensorOrientationT MountingParameters::SensorOrientationT_MAX;
constexpr int MountingParameters::SensorOrientationT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MountingParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<MountingParameters>()._has_bits_);
  static const ::pb::PDK::SensorMsgHeader& t_header(const MountingParameters* msg);
  static void set_has_t_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_f_currentlongpos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f_currentlatpos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f_currentvertpos(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f_currentlongposcog(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f_currentyawangle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f_currentdamping(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_t_currentorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::PDK::SensorMsgHeader&
MountingParameters::_Internal::t_header(const MountingParameters* msg) {
  return *msg->t_header_;
}
void MountingParameters::clear_t_header() {
  if (t_header_ != nullptr) t_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MountingParameters::MountingParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.PDK.MountingParameters)
}
MountingParameters::MountingParameters(const MountingParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_t_header()) {
    t_header_ = new ::pb::PDK::SensorMsgHeader(*from.t_header_);
  } else {
    t_header_ = nullptr;
  }
  ::memcpy(&t_currentorientation_, &from.t_currentorientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_currentdamping_) -
    reinterpret_cast<char*>(&t_currentorientation_)) + sizeof(f_currentdamping_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.MountingParameters)
}

inline void MountingParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f_currentdamping_) -
    reinterpret_cast<char*>(&t_header_)) + sizeof(f_currentdamping_));
}

MountingParameters::~MountingParameters() {
  // @@protoc_insertion_point(destructor:pb.PDK.MountingParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MountingParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete t_header_;
}

void MountingParameters::ArenaDtor(void* object) {
  MountingParameters* _this = reinterpret_cast< MountingParameters* >(object);
  (void)_this;
}
void MountingParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MountingParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MountingParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.MountingParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(t_header_ != nullptr);
    t_header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&t_currentorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f_currentdamping_) -
        reinterpret_cast<char*>(&t_currentorientation_)) + sizeof(f_currentdamping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MountingParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pb.PDK.SensorMsgHeader t_Header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f_CurrentLongPos = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_f_currentlongpos(&has_bits);
          f_currentlongpos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_CurrentLatPos = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_f_currentlatpos(&has_bits);
          f_currentlatpos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_CurrentVertPos = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_f_currentvertpos(&has_bits);
          f_currentvertpos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_CurrentLongPosCoG = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_f_currentlongposcog(&has_bits);
          f_currentlongposcog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_CurrentYawAngle = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_f_currentyawangle(&has_bits);
          f_currentyawangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_CurrentDamping = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_f_currentdamping(&has_bits);
          f_currentdamping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.PDK.MountingParameters.SensorOrientationT t_CurrentOrientation = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::PDK::MountingParameters_SensorOrientationT_IsValid(val))) {
            _internal_set_t_currentorientation(static_cast<::pb::PDK::MountingParameters_SensorOrientationT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MountingParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.MountingParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.SensorMsgHeader t_Header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::t_header(this), target, stream);
  }

  // optional float f_CurrentLongPos = 19;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_f_currentlongpos(), target);
  }

  // optional float f_CurrentLatPos = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_f_currentlatpos(), target);
  }

  // optional float f_CurrentVertPos = 21;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_f_currentvertpos(), target);
  }

  // optional float f_CurrentLongPosCoG = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_f_currentlongposcog(), target);
  }

  // optional float f_CurrentYawAngle = 23;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_f_currentyawangle(), target);
  }

  // optional float f_CurrentDamping = 26;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_f_currentdamping(), target);
  }

  // optional .pb.PDK.MountingParameters.SensorOrientationT t_CurrentOrientation = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_t_currentorientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.MountingParameters)
  return target;
}

size_t MountingParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.MountingParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.PDK.SensorMsgHeader t_Header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_header_);
    }

    // optional .pb.PDK.MountingParameters.SensorOrientationT t_CurrentOrientation = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_t_currentorientation());
    }

    // optional float f_CurrentLongPos = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float f_CurrentLatPos = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float f_CurrentVertPos = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float f_CurrentLongPosCoG = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float f_CurrentYawAngle = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float f_CurrentDamping = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MountingParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MountingParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MountingParameters::GetClassData() const { return &_class_data_; }

void MountingParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MountingParameters *>(to)->MergeFrom(
      static_cast<const MountingParameters &>(from));
}


void MountingParameters::MergeFrom(const MountingParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.MountingParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_t_header()->::pb::PDK::SensorMsgHeader::MergeFrom(from._internal_t_header());
    }
    if (cached_has_bits & 0x00000002u) {
      t_currentorientation_ = from.t_currentorientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      f_currentlongpos_ = from.f_currentlongpos_;
    }
    if (cached_has_bits & 0x00000008u) {
      f_currentlatpos_ = from.f_currentlatpos_;
    }
    if (cached_has_bits & 0x00000010u) {
      f_currentvertpos_ = from.f_currentvertpos_;
    }
    if (cached_has_bits & 0x00000020u) {
      f_currentlongposcog_ = from.f_currentlongposcog_;
    }
    if (cached_has_bits & 0x00000040u) {
      f_currentyawangle_ = from.f_currentyawangle_;
    }
    if (cached_has_bits & 0x00000080u) {
      f_currentdamping_ = from.f_currentdamping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MountingParameters::CopyFrom(const MountingParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.MountingParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountingParameters::IsInitialized() const {
  return true;
}

void MountingParameters::InternalSwap(MountingParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MountingParameters, f_currentdamping_)
      + sizeof(MountingParameters::f_currentdamping_)
      - PROTOBUF_FIELD_OFFSET(MountingParameters, t_header_)>(
          reinterpret_cast<char*>(&t_header_),
          reinterpret_cast<char*>(&other->t_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MountingParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pdk_5fMountingParameters_2eproto_getter, &descriptor_table_pdk_5fMountingParameters_2eproto_once,
      file_level_metadata_pdk_5fMountingParameters_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PDK::MountingParameters* Arena::CreateMaybeMessage< ::pb::PDK::MountingParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::MountingParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
