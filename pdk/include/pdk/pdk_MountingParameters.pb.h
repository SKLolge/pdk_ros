// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_MountingParameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pdk_5fMountingParameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pdk_5fMountingParameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pdk_SensorMsgHeader.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pdk_5fMountingParameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pdk_5fMountingParameters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fMountingParameters_2eproto;
namespace pb {
namespace PDK {
class MountingParameters;
struct MountingParametersDefaultTypeInternal;
extern MountingParametersDefaultTypeInternal _MountingParameters_default_instance_;
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PDK::MountingParameters* Arena::CreateMaybeMessage<::pb::PDK::MountingParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace PDK {

enum MountingParameters_SensorOrientationT : int {
  MountingParameters_SensorOrientationT_SENSOR_ORIENTATION_NORMAL = 0,
  MountingParameters_SensorOrientationT_SENSOR_ORIENTATION_ROTATED = 1
};
bool MountingParameters_SensorOrientationT_IsValid(int value);
constexpr MountingParameters_SensorOrientationT MountingParameters_SensorOrientationT_SensorOrientationT_MIN = MountingParameters_SensorOrientationT_SENSOR_ORIENTATION_NORMAL;
constexpr MountingParameters_SensorOrientationT MountingParameters_SensorOrientationT_SensorOrientationT_MAX = MountingParameters_SensorOrientationT_SENSOR_ORIENTATION_ROTATED;
constexpr int MountingParameters_SensorOrientationT_SensorOrientationT_ARRAYSIZE = MountingParameters_SensorOrientationT_SensorOrientationT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MountingParameters_SensorOrientationT_descriptor();
template<typename T>
inline const std::string& MountingParameters_SensorOrientationT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MountingParameters_SensorOrientationT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MountingParameters_SensorOrientationT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MountingParameters_SensorOrientationT_descriptor(), enum_t_value);
}
inline bool MountingParameters_SensorOrientationT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MountingParameters_SensorOrientationT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MountingParameters_SensorOrientationT>(
    MountingParameters_SensorOrientationT_descriptor(), name, value);
}
// ===================================================================

class MountingParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PDK.MountingParameters) */ {
 public:
  inline MountingParameters() : MountingParameters(nullptr) {}
  ~MountingParameters() override;
  explicit constexpr MountingParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountingParameters(const MountingParameters& from);
  MountingParameters(MountingParameters&& from) noexcept
    : MountingParameters() {
    *this = ::std::move(from);
  }

  inline MountingParameters& operator=(const MountingParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountingParameters& operator=(MountingParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MountingParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountingParameters* internal_default_instance() {
    return reinterpret_cast<const MountingParameters*>(
               &_MountingParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MountingParameters& a, MountingParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(MountingParameters* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountingParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountingParameters* New() const final {
    return new MountingParameters();
  }

  MountingParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountingParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MountingParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MountingParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountingParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PDK.MountingParameters";
  }
  protected:
  explicit MountingParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MountingParameters_SensorOrientationT SensorOrientationT;
  static constexpr SensorOrientationT SENSOR_ORIENTATION_NORMAL =
    MountingParameters_SensorOrientationT_SENSOR_ORIENTATION_NORMAL;
  static constexpr SensorOrientationT SENSOR_ORIENTATION_ROTATED =
    MountingParameters_SensorOrientationT_SENSOR_ORIENTATION_ROTATED;
  static inline bool SensorOrientationT_IsValid(int value) {
    return MountingParameters_SensorOrientationT_IsValid(value);
  }
  static constexpr SensorOrientationT SensorOrientationT_MIN =
    MountingParameters_SensorOrientationT_SensorOrientationT_MIN;
  static constexpr SensorOrientationT SensorOrientationT_MAX =
    MountingParameters_SensorOrientationT_SensorOrientationT_MAX;
  static constexpr int SensorOrientationT_ARRAYSIZE =
    MountingParameters_SensorOrientationT_SensorOrientationT_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SensorOrientationT_descriptor() {
    return MountingParameters_SensorOrientationT_descriptor();
  }
  template<typename T>
  static inline const std::string& SensorOrientationT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SensorOrientationT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SensorOrientationT_Name.");
    return MountingParameters_SensorOrientationT_Name(enum_t_value);
  }
  static inline bool SensorOrientationT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SensorOrientationT* value) {
    return MountingParameters_SensorOrientationT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTHeaderFieldNumber = 1,
    kTCurrentOrientationFieldNumber = 27,
    kFCurrentLongPosFieldNumber = 19,
    kFCurrentLatPosFieldNumber = 20,
    kFCurrentVertPosFieldNumber = 21,
    kFCurrentLongPosCoGFieldNumber = 22,
    kFCurrentYawAngleFieldNumber = 23,
    kFCurrentDampingFieldNumber = 26,
  };
  // optional .pb.PDK.SensorMsgHeader t_Header = 1;
  bool has_t_header() const;
  private:
  bool _internal_has_t_header() const;
  public:
  void clear_t_header();
  const ::pb::PDK::SensorMsgHeader& t_header() const;
  PROTOBUF_MUST_USE_RESULT ::pb::PDK::SensorMsgHeader* release_t_header();
  ::pb::PDK::SensorMsgHeader* mutable_t_header();
  void set_allocated_t_header(::pb::PDK::SensorMsgHeader* t_header);
  private:
  const ::pb::PDK::SensorMsgHeader& _internal_t_header() const;
  ::pb::PDK::SensorMsgHeader* _internal_mutable_t_header();
  public:
  void unsafe_arena_set_allocated_t_header(
      ::pb::PDK::SensorMsgHeader* t_header);
  ::pb::PDK::SensorMsgHeader* unsafe_arena_release_t_header();

  // optional .pb.PDK.MountingParameters.SensorOrientationT t_CurrentOrientation = 27;
  bool has_t_currentorientation() const;
  private:
  bool _internal_has_t_currentorientation() const;
  public:
  void clear_t_currentorientation();
  ::pb::PDK::MountingParameters_SensorOrientationT t_currentorientation() const;
  void set_t_currentorientation(::pb::PDK::MountingParameters_SensorOrientationT value);
  private:
  ::pb::PDK::MountingParameters_SensorOrientationT _internal_t_currentorientation() const;
  void _internal_set_t_currentorientation(::pb::PDK::MountingParameters_SensorOrientationT value);
  public:

  // optional float f_CurrentLongPos = 19;
  bool has_f_currentlongpos() const;
  private:
  bool _internal_has_f_currentlongpos() const;
  public:
  void clear_f_currentlongpos();
  float f_currentlongpos() const;
  void set_f_currentlongpos(float value);
  private:
  float _internal_f_currentlongpos() const;
  void _internal_set_f_currentlongpos(float value);
  public:

  // optional float f_CurrentLatPos = 20;
  bool has_f_currentlatpos() const;
  private:
  bool _internal_has_f_currentlatpos() const;
  public:
  void clear_f_currentlatpos();
  float f_currentlatpos() const;
  void set_f_currentlatpos(float value);
  private:
  float _internal_f_currentlatpos() const;
  void _internal_set_f_currentlatpos(float value);
  public:

  // optional float f_CurrentVertPos = 21;
  bool has_f_currentvertpos() const;
  private:
  bool _internal_has_f_currentvertpos() const;
  public:
  void clear_f_currentvertpos();
  float f_currentvertpos() const;
  void set_f_currentvertpos(float value);
  private:
  float _internal_f_currentvertpos() const;
  void _internal_set_f_currentvertpos(float value);
  public:

  // optional float f_CurrentLongPosCoG = 22;
  bool has_f_currentlongposcog() const;
  private:
  bool _internal_has_f_currentlongposcog() const;
  public:
  void clear_f_currentlongposcog();
  float f_currentlongposcog() const;
  void set_f_currentlongposcog(float value);
  private:
  float _internal_f_currentlongposcog() const;
  void _internal_set_f_currentlongposcog(float value);
  public:

  // optional float f_CurrentYawAngle = 23;
  bool has_f_currentyawangle() const;
  private:
  bool _internal_has_f_currentyawangle() const;
  public:
  void clear_f_currentyawangle();
  float f_currentyawangle() const;
  void set_f_currentyawangle(float value);
  private:
  float _internal_f_currentyawangle() const;
  void _internal_set_f_currentyawangle(float value);
  public:

  // optional float f_CurrentDamping = 26;
  bool has_f_currentdamping() const;
  private:
  bool _internal_has_f_currentdamping() const;
  public:
  void clear_f_currentdamping();
  float f_currentdamping() const;
  void set_f_currentdamping(float value);
  private:
  float _internal_f_currentdamping() const;
  void _internal_set_f_currentdamping(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PDK.MountingParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::PDK::SensorMsgHeader* t_header_;
  int t_currentorientation_;
  float f_currentlongpos_;
  float f_currentlatpos_;
  float f_currentvertpos_;
  float f_currentlongposcog_;
  float f_currentyawangle_;
  float f_currentdamping_;
  friend struct ::TableStruct_pdk_5fMountingParameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MountingParameters

// optional .pb.PDK.SensorMsgHeader t_Header = 1;
inline bool MountingParameters::_internal_has_t_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || t_header_ != nullptr);
  return value;
}
inline bool MountingParameters::has_t_header() const {
  return _internal_has_t_header();
}
inline const ::pb::PDK::SensorMsgHeader& MountingParameters::_internal_t_header() const {
  const ::pb::PDK::SensorMsgHeader* p = t_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::PDK::SensorMsgHeader&>(
      ::pb::PDK::_SensorMsgHeader_default_instance_);
}
inline const ::pb::PDK::SensorMsgHeader& MountingParameters::t_header() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.t_Header)
  return _internal_t_header();
}
inline void MountingParameters::unsafe_arena_set_allocated_t_header(
    ::pb::PDK::SensorMsgHeader* t_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_header_);
  }
  t_header_ = t_header;
  if (t_header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.PDK.MountingParameters.t_Header)
}
inline ::pb::PDK::SensorMsgHeader* MountingParameters::release_t_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::SensorMsgHeader* temp = t_header_;
  t_header_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::PDK::SensorMsgHeader* MountingParameters::unsafe_arena_release_t_header() {
  // @@protoc_insertion_point(field_release:pb.PDK.MountingParameters.t_Header)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::PDK::SensorMsgHeader* temp = t_header_;
  t_header_ = nullptr;
  return temp;
}
inline ::pb::PDK::SensorMsgHeader* MountingParameters::_internal_mutable_t_header() {
  _has_bits_[0] |= 0x00000001u;
  if (t_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PDK::SensorMsgHeader>(GetArenaForAllocation());
    t_header_ = p;
  }
  return t_header_;
}
inline ::pb::PDK::SensorMsgHeader* MountingParameters::mutable_t_header() {
  ::pb::PDK::SensorMsgHeader* _msg = _internal_mutable_t_header();
  // @@protoc_insertion_point(field_mutable:pb.PDK.MountingParameters.t_Header)
  return _msg;
}
inline void MountingParameters::set_allocated_t_header(::pb::PDK::SensorMsgHeader* t_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_header_);
  }
  if (t_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_header));
    if (message_arena != submessage_arena) {
      t_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  t_header_ = t_header;
  // @@protoc_insertion_point(field_set_allocated:pb.PDK.MountingParameters.t_Header)
}

// optional float f_CurrentLongPos = 19;
inline bool MountingParameters::_internal_has_f_currentlongpos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MountingParameters::has_f_currentlongpos() const {
  return _internal_has_f_currentlongpos();
}
inline void MountingParameters::clear_f_currentlongpos() {
  f_currentlongpos_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MountingParameters::_internal_f_currentlongpos() const {
  return f_currentlongpos_;
}
inline float MountingParameters::f_currentlongpos() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.f_CurrentLongPos)
  return _internal_f_currentlongpos();
}
inline void MountingParameters::_internal_set_f_currentlongpos(float value) {
  _has_bits_[0] |= 0x00000004u;
  f_currentlongpos_ = value;
}
inline void MountingParameters::set_f_currentlongpos(float value) {
  _internal_set_f_currentlongpos(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MountingParameters.f_CurrentLongPos)
}

// optional float f_CurrentLatPos = 20;
inline bool MountingParameters::_internal_has_f_currentlatpos() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MountingParameters::has_f_currentlatpos() const {
  return _internal_has_f_currentlatpos();
}
inline void MountingParameters::clear_f_currentlatpos() {
  f_currentlatpos_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MountingParameters::_internal_f_currentlatpos() const {
  return f_currentlatpos_;
}
inline float MountingParameters::f_currentlatpos() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.f_CurrentLatPos)
  return _internal_f_currentlatpos();
}
inline void MountingParameters::_internal_set_f_currentlatpos(float value) {
  _has_bits_[0] |= 0x00000008u;
  f_currentlatpos_ = value;
}
inline void MountingParameters::set_f_currentlatpos(float value) {
  _internal_set_f_currentlatpos(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MountingParameters.f_CurrentLatPos)
}

// optional float f_CurrentVertPos = 21;
inline bool MountingParameters::_internal_has_f_currentvertpos() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MountingParameters::has_f_currentvertpos() const {
  return _internal_has_f_currentvertpos();
}
inline void MountingParameters::clear_f_currentvertpos() {
  f_currentvertpos_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MountingParameters::_internal_f_currentvertpos() const {
  return f_currentvertpos_;
}
inline float MountingParameters::f_currentvertpos() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.f_CurrentVertPos)
  return _internal_f_currentvertpos();
}
inline void MountingParameters::_internal_set_f_currentvertpos(float value) {
  _has_bits_[0] |= 0x00000010u;
  f_currentvertpos_ = value;
}
inline void MountingParameters::set_f_currentvertpos(float value) {
  _internal_set_f_currentvertpos(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MountingParameters.f_CurrentVertPos)
}

// optional float f_CurrentLongPosCoG = 22;
inline bool MountingParameters::_internal_has_f_currentlongposcog() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MountingParameters::has_f_currentlongposcog() const {
  return _internal_has_f_currentlongposcog();
}
inline void MountingParameters::clear_f_currentlongposcog() {
  f_currentlongposcog_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float MountingParameters::_internal_f_currentlongposcog() const {
  return f_currentlongposcog_;
}
inline float MountingParameters::f_currentlongposcog() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.f_CurrentLongPosCoG)
  return _internal_f_currentlongposcog();
}
inline void MountingParameters::_internal_set_f_currentlongposcog(float value) {
  _has_bits_[0] |= 0x00000020u;
  f_currentlongposcog_ = value;
}
inline void MountingParameters::set_f_currentlongposcog(float value) {
  _internal_set_f_currentlongposcog(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MountingParameters.f_CurrentLongPosCoG)
}

// optional float f_CurrentYawAngle = 23;
inline bool MountingParameters::_internal_has_f_currentyawangle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MountingParameters::has_f_currentyawangle() const {
  return _internal_has_f_currentyawangle();
}
inline void MountingParameters::clear_f_currentyawangle() {
  f_currentyawangle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float MountingParameters::_internal_f_currentyawangle() const {
  return f_currentyawangle_;
}
inline float MountingParameters::f_currentyawangle() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.f_CurrentYawAngle)
  return _internal_f_currentyawangle();
}
inline void MountingParameters::_internal_set_f_currentyawangle(float value) {
  _has_bits_[0] |= 0x00000040u;
  f_currentyawangle_ = value;
}
inline void MountingParameters::set_f_currentyawangle(float value) {
  _internal_set_f_currentyawangle(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MountingParameters.f_CurrentYawAngle)
}

// optional float f_CurrentDamping = 26;
inline bool MountingParameters::_internal_has_f_currentdamping() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MountingParameters::has_f_currentdamping() const {
  return _internal_has_f_currentdamping();
}
inline void MountingParameters::clear_f_currentdamping() {
  f_currentdamping_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float MountingParameters::_internal_f_currentdamping() const {
  return f_currentdamping_;
}
inline float MountingParameters::f_currentdamping() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.f_CurrentDamping)
  return _internal_f_currentdamping();
}
inline void MountingParameters::_internal_set_f_currentdamping(float value) {
  _has_bits_[0] |= 0x00000080u;
  f_currentdamping_ = value;
}
inline void MountingParameters::set_f_currentdamping(float value) {
  _internal_set_f_currentdamping(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MountingParameters.f_CurrentDamping)
}

// optional .pb.PDK.MountingParameters.SensorOrientationT t_CurrentOrientation = 27;
inline bool MountingParameters::_internal_has_t_currentorientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MountingParameters::has_t_currentorientation() const {
  return _internal_has_t_currentorientation();
}
inline void MountingParameters::clear_t_currentorientation() {
  t_currentorientation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::PDK::MountingParameters_SensorOrientationT MountingParameters::_internal_t_currentorientation() const {
  return static_cast< ::pb::PDK::MountingParameters_SensorOrientationT >(t_currentorientation_);
}
inline ::pb::PDK::MountingParameters_SensorOrientationT MountingParameters::t_currentorientation() const {
  // @@protoc_insertion_point(field_get:pb.PDK.MountingParameters.t_CurrentOrientation)
  return _internal_t_currentorientation();
}
inline void MountingParameters::_internal_set_t_currentorientation(::pb::PDK::MountingParameters_SensorOrientationT value) {
  assert(::pb::PDK::MountingParameters_SensorOrientationT_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  t_currentorientation_ = value;
}
inline void MountingParameters::set_t_currentorientation(::pb::PDK::MountingParameters_SensorOrientationT value) {
  _internal_set_t_currentorientation(value);
  // @@protoc_insertion_point(field_set:pb.PDK.MountingParameters.t_CurrentOrientation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PDK
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::PDK::MountingParameters_SensorOrientationT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PDK::MountingParameters_SensorOrientationT>() {
  return ::pb::PDK::MountingParameters_SensorOrientationT_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pdk_5fMountingParameters_2eproto
