// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdk_RadarFreespace.proto

#include "pdk_RadarFreespace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
namespace PDK {
constexpr PointXY::PointXY(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f_x_(0)
  , f_y_(0){}
struct PointXYDefaultTypeInternal {
  constexpr PointXYDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointXYDefaultTypeInternal() {}
  union {
    PointXY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointXYDefaultTypeInternal _PointXY_default_instance_;
constexpr inner_object::inner_object(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : a_points_(){}
struct inner_objectDefaultTypeInternal {
  constexpr inner_objectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~inner_objectDefaultTypeInternal() {}
  union {
    inner_object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT inner_objectDefaultTypeInternal _inner_object_default_instance_;
constexpr FreespaceDataChannel::FreespaceDataChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : a_spline_points_()
  , a_inner_object_data_()
  , a_bspline_control_points_()
  , a_control_points_status_()
  , t_header_(nullptr)
  , f_vehicle_heading_rad_(0){}
struct FreespaceDataChannelDefaultTypeInternal {
  constexpr FreespaceDataChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreespaceDataChannelDefaultTypeInternal() {}
  union {
    FreespaceDataChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreespaceDataChannelDefaultTypeInternal _FreespaceDataChannel_default_instance_;
}  // namespace PDK
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pdk_5fRadarFreespace_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pdk_5fRadarFreespace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pdk_5fRadarFreespace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pdk_5fRadarFreespace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PointXY, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PointXY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PointXY, f_x_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::PointXY, f_y_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::inner_object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::inner_object, a_points_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, t_header_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, a_spline_points_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, a_inner_object_data_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, a_bspline_control_points_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, a_control_points_status_),
  PROTOBUF_FIELD_OFFSET(::pb::PDK::FreespaceDataChannel, f_vehicle_heading_rad_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::PDK::PointXY)},
  { 9, -1, sizeof(::pb::PDK::inner_object)},
  { 15, 26, sizeof(::pb::PDK::FreespaceDataChannel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::PDK::_PointXY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::PDK::_inner_object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::PDK::_FreespaceDataChannel_default_instance_),
};

const char descriptor_table_protodef_pdk_5fRadarFreespace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030pdk_RadarFreespace.proto\022\006pb.PDK\032\023pdk_"
  "MsgHeader.proto\")\n\007PointXY\022\016\n\003f_x\030\001 \001(\002:"
  "\0010\022\016\n\003f_y\030\002 \001(\002:\0010\"1\n\014inner_object\022!\n\010a_"
  "points\030\001 \003(\0132\017.pb.PDK.PointXY\"\213\002\n\024Freesp"
  "aceDataChannel\022#\n\010t_header\030\001 \001(\0132\021.pb.PD"
  "K.MsgHeader\022(\n\017a_spline_points\030\002 \003(\0132\017.p"
  "b.PDK.PointXY\0221\n\023a_inner_object_data\030\003 \003"
  "(\0132\024.pb.PDK.inner_object\0221\n\030a_bspline_co"
  "ntrol_points\030\004 \003(\0132\017.pb.PDK.PointXY\022\037\n\027a"
  "_control_points_status\030\005 \003(\021\022\035\n\025f_vehicl"
  "e_heading_rad\030\010 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pdk_5fRadarFreespace_2eproto_deps[1] = {
  &::descriptor_table_pdk_5fMsgHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pdk_5fRadarFreespace_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdk_5fRadarFreespace_2eproto = {
  false, false, 419, descriptor_table_protodef_pdk_5fRadarFreespace_2eproto, "pdk_RadarFreespace.proto", 
  &descriptor_table_pdk_5fRadarFreespace_2eproto_once, descriptor_table_pdk_5fRadarFreespace_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_pdk_5fRadarFreespace_2eproto::offsets,
  file_level_metadata_pdk_5fRadarFreespace_2eproto, file_level_enum_descriptors_pdk_5fRadarFreespace_2eproto, file_level_service_descriptors_pdk_5fRadarFreespace_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pdk_5fRadarFreespace_2eproto_getter() {
  return &descriptor_table_pdk_5fRadarFreespace_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pdk_5fRadarFreespace_2eproto(&descriptor_table_pdk_5fRadarFreespace_2eproto);
namespace pb {
namespace PDK {

// ===================================================================

class PointXY::_Internal {
 public:
  using HasBits = decltype(std::declval<PointXY>()._has_bits_);
  static void set_has_f_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_f_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PointXY::PointXY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.PDK.PointXY)
}
PointXY::PointXY(const PointXY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&f_x_, &from.f_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_y_) -
    reinterpret_cast<char*>(&f_x_)) + sizeof(f_y_));
  // @@protoc_insertion_point(copy_constructor:pb.PDK.PointXY)
}

inline void PointXY::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f_y_) -
    reinterpret_cast<char*>(&f_x_)) + sizeof(f_y_));
}

PointXY::~PointXY() {
  // @@protoc_insertion_point(destructor:pb.PDK.PointXY)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PointXY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PointXY::ArenaDtor(void* object) {
  PointXY* _this = reinterpret_cast< PointXY* >(object);
  (void)_this;
}
void PointXY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointXY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointXY::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.PointXY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&f_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f_y_) -
        reinterpret_cast<char*>(&f_x_)) + sizeof(f_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointXY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float f_x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f_x(&has_bits);
          f_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f_y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_f_y(&has_bits);
          f_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointXY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.PointXY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f_x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_f_x(), target);
  }

  // optional float f_y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.PointXY)
  return target;
}

size_t PointXY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.PointXY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float f_x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float f_y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointXY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PointXY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointXY::GetClassData() const { return &_class_data_; }

void PointXY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PointXY *>(to)->MergeFrom(
      static_cast<const PointXY &>(from));
}


void PointXY::MergeFrom(const PointXY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.PointXY)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      f_x_ = from.f_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      f_y_ = from.f_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointXY::CopyFrom(const PointXY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.PointXY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointXY::IsInitialized() const {
  return true;
}

void PointXY::InternalSwap(PointXY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointXY, f_y_)
      + sizeof(PointXY::f_y_)
      - PROTOBUF_FIELD_OFFSET(PointXY, f_x_)>(
          reinterpret_cast<char*>(&f_x_),
          reinterpret_cast<char*>(&other->f_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointXY::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pdk_5fRadarFreespace_2eproto_getter, &descriptor_table_pdk_5fRadarFreespace_2eproto_once,
      file_level_metadata_pdk_5fRadarFreespace_2eproto[0]);
}

// ===================================================================

class inner_object::_Internal {
 public:
};

inner_object::inner_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  a_points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.PDK.inner_object)
}
inner_object::inner_object(const inner_object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      a_points_(from.a_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.PDK.inner_object)
}

inline void inner_object::SharedCtor() {
}

inner_object::~inner_object() {
  // @@protoc_insertion_point(destructor:pb.PDK.inner_object)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void inner_object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void inner_object::ArenaDtor(void* object) {
  inner_object* _this = reinterpret_cast< inner_object* >(object);
  (void)_this;
}
void inner_object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void inner_object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void inner_object::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.inner_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* inner_object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pb.PDK.PointXY a_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* inner_object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.inner_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.PDK.PointXY a_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_a_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.inner_object)
  return target;
}

size_t inner_object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.inner_object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PDK.PointXY a_points = 1;
  total_size += 1UL * this->_internal_a_points_size();
  for (const auto& msg : this->a_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData inner_object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    inner_object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*inner_object::GetClassData() const { return &_class_data_; }

void inner_object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<inner_object *>(to)->MergeFrom(
      static_cast<const inner_object &>(from));
}


void inner_object::MergeFrom(const inner_object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.inner_object)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  a_points_.MergeFrom(from.a_points_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void inner_object::CopyFrom(const inner_object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.inner_object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inner_object::IsInitialized() const {
  return true;
}

void inner_object::InternalSwap(inner_object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  a_points_.InternalSwap(&other->a_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata inner_object::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pdk_5fRadarFreespace_2eproto_getter, &descriptor_table_pdk_5fRadarFreespace_2eproto_once,
      file_level_metadata_pdk_5fRadarFreespace_2eproto[1]);
}

// ===================================================================

class FreespaceDataChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<FreespaceDataChannel>()._has_bits_);
  static const ::pb::PDK::MsgHeader& t_header(const FreespaceDataChannel* msg);
  static void set_has_t_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_f_vehicle_heading_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::PDK::MsgHeader&
FreespaceDataChannel::_Internal::t_header(const FreespaceDataChannel* msg) {
  return *msg->t_header_;
}
void FreespaceDataChannel::clear_t_header() {
  if (t_header_ != nullptr) t_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FreespaceDataChannel::FreespaceDataChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  a_spline_points_(arena),
  a_inner_object_data_(arena),
  a_bspline_control_points_(arena),
  a_control_points_status_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.PDK.FreespaceDataChannel)
}
FreespaceDataChannel::FreespaceDataChannel(const FreespaceDataChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      a_spline_points_(from.a_spline_points_),
      a_inner_object_data_(from.a_inner_object_data_),
      a_bspline_control_points_(from.a_bspline_control_points_),
      a_control_points_status_(from.a_control_points_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_t_header()) {
    t_header_ = new ::pb::PDK::MsgHeader(*from.t_header_);
  } else {
    t_header_ = nullptr;
  }
  f_vehicle_heading_rad_ = from.f_vehicle_heading_rad_;
  // @@protoc_insertion_point(copy_constructor:pb.PDK.FreespaceDataChannel)
}

inline void FreespaceDataChannel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f_vehicle_heading_rad_) -
    reinterpret_cast<char*>(&t_header_)) + sizeof(f_vehicle_heading_rad_));
}

FreespaceDataChannel::~FreespaceDataChannel() {
  // @@protoc_insertion_point(destructor:pb.PDK.FreespaceDataChannel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FreespaceDataChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete t_header_;
}

void FreespaceDataChannel::ArenaDtor(void* object) {
  FreespaceDataChannel* _this = reinterpret_cast< FreespaceDataChannel* >(object);
  (void)_this;
}
void FreespaceDataChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreespaceDataChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreespaceDataChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PDK.FreespaceDataChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_spline_points_.Clear();
  a_inner_object_data_.Clear();
  a_bspline_control_points_.Clear();
  a_control_points_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(t_header_ != nullptr);
    t_header_->Clear();
  }
  f_vehicle_heading_rad_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreespaceDataChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pb.PDK.MsgHeader t_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.PDK.PointXY a_spline_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_spline_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.PDK.inner_object a_inner_object_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_inner_object_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.PDK.PointXY a_bspline_control_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_bspline_control_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated sint32 a_control_points_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_a_control_points_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_a_control_points_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f_vehicle_heading_rad = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_f_vehicle_heading_rad(&has_bits);
          f_vehicle_heading_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreespaceDataChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PDK.FreespaceDataChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.PDK.MsgHeader t_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::t_header(this), target, stream);
  }

  // repeated .pb.PDK.PointXY a_spline_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a_spline_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_a_spline_points(i), target, stream);
  }

  // repeated .pb.PDK.inner_object a_inner_object_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a_inner_object_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_a_inner_object_data(i), target, stream);
  }

  // repeated .pb.PDK.PointXY a_bspline_control_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a_bspline_control_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_a_bspline_control_points(i), target, stream);
  }

  // repeated sint32 a_control_points_status = 5;
  for (int i = 0, n = this->_internal_a_control_points_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_a_control_points_status(i), target);
  }

  // optional float f_vehicle_heading_rad = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_f_vehicle_heading_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PDK.FreespaceDataChannel)
  return target;
}

size_t FreespaceDataChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PDK.FreespaceDataChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PDK.PointXY a_spline_points = 2;
  total_size += 1UL * this->_internal_a_spline_points_size();
  for (const auto& msg : this->a_spline_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.PDK.inner_object a_inner_object_data = 3;
  total_size += 1UL * this->_internal_a_inner_object_data_size();
  for (const auto& msg : this->a_inner_object_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.PDK.PointXY a_bspline_control_points = 4;
  total_size += 1UL * this->_internal_a_bspline_control_points_size();
  for (const auto& msg : this->a_bspline_control_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated sint32 a_control_points_status = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->a_control_points_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_a_control_points_status_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pb.PDK.MsgHeader t_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_header_);
    }

    // optional float f_vehicle_heading_rad = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreespaceDataChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FreespaceDataChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreespaceDataChannel::GetClassData() const { return &_class_data_; }

void FreespaceDataChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FreespaceDataChannel *>(to)->MergeFrom(
      static_cast<const FreespaceDataChannel &>(from));
}


void FreespaceDataChannel::MergeFrom(const FreespaceDataChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PDK.FreespaceDataChannel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  a_spline_points_.MergeFrom(from.a_spline_points_);
  a_inner_object_data_.MergeFrom(from.a_inner_object_data_);
  a_bspline_control_points_.MergeFrom(from.a_bspline_control_points_);
  a_control_points_status_.MergeFrom(from.a_control_points_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_t_header()->::pb::PDK::MsgHeader::MergeFrom(from._internal_t_header());
    }
    if (cached_has_bits & 0x00000002u) {
      f_vehicle_heading_rad_ = from.f_vehicle_heading_rad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreespaceDataChannel::CopyFrom(const FreespaceDataChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PDK.FreespaceDataChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreespaceDataChannel::IsInitialized() const {
  return true;
}

void FreespaceDataChannel::InternalSwap(FreespaceDataChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  a_spline_points_.InternalSwap(&other->a_spline_points_);
  a_inner_object_data_.InternalSwap(&other->a_inner_object_data_);
  a_bspline_control_points_.InternalSwap(&other->a_bspline_control_points_);
  a_control_points_status_.InternalSwap(&other->a_control_points_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreespaceDataChannel, f_vehicle_heading_rad_)
      + sizeof(FreespaceDataChannel::f_vehicle_heading_rad_)
      - PROTOBUF_FIELD_OFFSET(FreespaceDataChannel, t_header_)>(
          reinterpret_cast<char*>(&t_header_),
          reinterpret_cast<char*>(&other->t_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreespaceDataChannel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pdk_5fRadarFreespace_2eproto_getter, &descriptor_table_pdk_5fRadarFreespace_2eproto_once,
      file_level_metadata_pdk_5fRadarFreespace_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PDK
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PDK::PointXY* Arena::CreateMaybeMessage< ::pb::PDK::PointXY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::PointXY >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PDK::inner_object* Arena::CreateMaybeMessage< ::pb::PDK::inner_object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::inner_object >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PDK::FreespaceDataChannel* Arena::CreateMaybeMessage< ::pb::PDK::FreespaceDataChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PDK::FreespaceDataChannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
